This text file contains the procedure for integrating API by connecting APIs into Angular Project and Adding Data for Users Using POST API

-----------Create a file named index.js to establish a server using Express, a popular web framework for Node.js, configured to listen on port 7102 (localhost:7102). The server handles HTTP requests and responses, providing endpoints [GET/api/userlists: Retrieves a list of users stored in userlists. POST/api/userlists: Adds a new user to userlists based on data provided in the request body. Timestamps (LastLoginTime, CreatedAt, UpdatedAt) are automatically generated using moment-timezone in IST (Indian Standard Time).] for interacting with user data.The integration of swagger-jsdoc and swagger-ui-express enables automatic generation and serving of API documentation. Swagger UI (/api-docs) provides an interactive interface where developers can explore API endpoints, view schemas, and test requests.


----------Open your command prompt in your PC/laptop and create a new angular project(Angular_project) using ng new Angular_project .Generate services folder containing service using ng g services/user-data. Go to user-dataservice.ts and use import { HttpClient } from '@angular/common/http' which imports the HttpClient module from Angular's common HTTP library, used to make HTTP requests. and use url="http://localhost:7102/api/userlists" which  defines a property url that holds the base URL for the API endpoint (http://localhost:7102/api/userlists). The 
constructor(private http: HttpClient) { ... }  defines a constructor that injects Angular's HttpClient service. This allows the service to make HTTP requests to external APIs. Methods used were users() { ... } which defines a users() that sends an HTTP GET request to this.url, which retrieves a list of users from the API endpoint and saveUsers(data: any) { ... } which defines a  saveUsers(data: any) that sends an HTTP POST request to this.url, sending data as the payload to create or update user data on the server.


----------Go to app.component.ts and import { UserDataService } from './services/user-data.service' to import the UserDataService from a local service file (user-data.service.ts), allowing the component to interact with user data through HTTP requests. Import { catchError } from 'rxjs/operators'; and import { throwError } from 'rxjs' as they imports operators and functions from RxJS for error handling within observable streams. Use constructor(private userData: UserDataService) { ... } which injects UserDataService into the component's constructor. It immediately invokes fetchUsers() to retrieve user data upon component initialization, use  fetchUsers() { ... } to use userData service's users() method to fetch user data via HTTP GET request. It handles errors using RxJS's catchError operator and updates this.errorMessage if an error occurs while  use getUserFormData(data: any) { ... } to use userData service's saveUsers(data) method to send user data via HTTP POST request for saving. It also handles errors similarly to fetchUsers(). Use private getErrorMessage(error: any): string { ... } to create private method that generates appropriate error messages based on whether the error is client-side or server-side.


----------Go and rewrite app.component.html to create a form for adding new users, complete with input validation and error handling. Use Angular's *ngIf directive for conditional rendering (errorMessage handling), ngModel for two-way data binding with form inputs, and validation attributes (required, pattern, minlength, email) for client-side validation. Validation messages (<span> elements) are displayed dynamically based on input validity and user interaction status (touched).

----------Open command prompt in the directory containing index.js and run the command node.index.js and open another command prompt in Angular_project and run ng serve .
